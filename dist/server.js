const e=require("express"),s=require("helmet"),t=require("cors"),r=require("cookie-parser"),o=require("dotenv"),a=require("winston"),n=require("mongoose"),i=require("bcryptjs"),c=new n.Schema({username:{type:String,required:!0,unique:!0},email:{type:String,required:!0,unique:!0},password:{type:String,required:!0},createdAt:{type:Date,default:Date.now}});c.pre("save",(async function(e){this.isModified("password")||e();const s=await i.genSalt(10);this.password=await i.hash(this.password,s)})),c.methods.matchPassword=async function(e){return await i.compare(e,this.password)};const u=n.model("User",c),d=require("jsonwebtoken"),m=require("express-validator"),l=e=>d.sign({id:e},process.env.JWT_SECRET,{expiresIn:"7d"}),p=async(e,s,t)=>{try{const r=e.cookies.authToken;if(!r)return s.status(401).json({success:!1,message:"Authorization required"});const o=d.verify(r,process.env.JWT_SECRET);if(!o?.id)return s.status(401).json({success:!1,message:"Invalid token payload"});const a=await u.findById(o.id).select("-password");if(!a)return s.status(401).json({success:!1,message:"User no longer exists"});e.user=a,t()}catch(e){return e instanceof d.JsonWebTokenError?s.status(401).json({success:!1,message:"Invalid or expired token"}):(console.error("Auth Middleware Error:",e),s.status(500).json({success:!1,message:"Internal server error during authentication"}))}},g=e.Router();g.post("/register",(async(e,s)=>{const t=(0,m.validationResult)(e);if(!t.isEmpty())return s.status(400).json({message:"Invalid input",errors:t.array()});try{const{username:t,email:r,password:o}=e.body;if(await u.findOne({email:r}))return s.status(409).json({message:"User already registered"});const a=new u({username:t,email:r,password:o});await a.save();const n=l(a._id);return s.status(201).json({id:a._id,username:a.username,email:a.email,token:n})}catch(e){return console.error("Error registering user:",e),s.status(500).json({message:"An error occurred while registering the user."})}})),g.post("/login",(async(e,s)=>{const t=(0,m.validationResult)(e);if(!t.isEmpty())return s.status(400).json({message:"Invalid input",errors:t.array()});try{const{email:t,password:r}=e.body,o=await u.findOne({email:t}).select("+password");if(!o)return s.status(401).json({message:"Invalid email or password"});if(!await o.matchPassword(r))return s.status(401).json({message:"Invalid email or password"});const a=l(o._id);return s.cookie("authToken",a,{httpOnly:!0,secure:!0,sameSite:"strict",maxAge:864e5}),s.status(200).json({id:o._id,username:o.username,email:o.email})}catch(e){return console.error("Error logging user:",e),s.status(500).json({message:"An error occurred while logging in."})}})),g.post("/logout",((e,s)=>{try{return s.clearCookie("authToken",{httpOnly:!0,secure:!0,sameSite:"strict"}),s.status(200).json({message:"Logged out successfully"})}catch(e){return console.error("Error logging out user:",e),s.status(500).json({message:"An error occurred while logging out."})}})),g.get("/me",p,(async(e,s)=>{try{const t=await u.findById(e.user.id).select("-password");return t?s.status(200).json(t):s.status(404).json({message:"User not found"})}catch(e){return console.error("Error getting user profile:",e),s.status(500).json({message:"An error occurred while fetching user profile."})}}));const y=g,h=new n.Schema({user:{type:n.Schema.Types.ObjectId,ref:"User",required:!0},name:{type:String,required:!0},email:{type:String,required:!0,unique:!0},phone:{type:String,required:!0},address:{type:String,required:!0},lastServiceDate:{type:Date,default:Date.now}}),f=n.model("Customer",h),w=new n.Schema({customer:{type:n.Schema.Types.ObjectId,ref:"Customer",required:!0},deviceType:{type:String,required:!0,enum:["smartphone","laptop","tablet","desktop","smartwatch","other"]},brand:{type:String,required:!0},model:{type:String,required:!0},problemDescription:{type:String,required:!0},estimatedCost:{type:Number,required:!0,min:0},status:{type:String,enum:["pending","in-progress","completed","cancelled"],default:"pending"},repairNotes:String,completionDate:Date},{timestamps:!0}),j=n.model("Repair",w),v=e.Router();v.post("/create-customer",p,(async(e,s)=>{const t=(0,m.validationResult)(e);if(!t.isEmpty())return s.status(400).json({message:"Invalid input",errors:t.array()});try{const t=e.user.id,{name:r,email:o,phone:a,address:n}=e.body;if(await f.findOne({email:o}))return s.status(409).json({message:"Customer already registered"});const i=await f.create({user:t,name:r,email:o,phone:a,address:n});return s.status(201).json(i)}catch(e){return console.error("Error creating customer:",e),s.status(500).json({message:"An error occurred while creating the customer."})}})),v.put("/update-customer/:id",p,(async(e,s)=>{const t=(0,m.validationResult)(e);if(!t.isEmpty())return s.status(400).json({message:"Invalid input",errors:t.array()});try{const t=await f.findByIdAndUpdate(e.params.id,e.body,{new:!0,runValidators:!0}).populate("user",["name","email"]);return t?s.status(200).json(t):s.status(404).json({message:"Customer not found"})}catch(e){return console.error("Error updating customer:",e),s.status(500).json({message:"An error occurred while updating the customer."})}})),v.delete("/delete-customer/:id",p,(async(e,s)=>{try{return await f.findByIdAndDelete(e.params.id)?s.status(200).json({message:"Customer deleted successfully"}):s.status(404).json({message:"Customer not found"})}catch(e){return console.error("Error deleting customer:",e),s.status(500).json({message:"An error occurred while deleting the customer."})}})),v.get("/get-customer/:id",p,(async(e,s)=>{try{const t=await f.findById(e.params.id).populate("user",["name","email"]);return t?s.status(200).json(t):s.status(404).json({message:"Customer not found"})}catch(e){return console.error("Error fetching customer by ID:",e),s.status(500).json({message:"An error occurred while fetching the customer."})}})),v.get("/get-customers",p,(async(e,s)=>{try{const t=await f.find({user:e.user.id}).populate("user",["name","email"]);return s.status(200).json(t)}catch(e){return console.error("Error fetching customers:",e),s.status(500).json({message:"An error occurred while fetching customers."})}})),v.get("/get-customers-repairs/:id",p,(async(e,s)=>{try{const t=await j.find({customer:e.params.id});s.json(t)}catch(e){s.status(500).json({message:"Error fetching customer repairs"})}}));const b=v,D=e.Router();D.post("/create-repair",p,(async(e,s)=>{try{const{deviceType:t,brand:r,model:o,problemDescription:a,estimatedCost:n,repairNotes:i,completionDate:c,customerId:u}=e.body,d=await f.findOne({_id:u,user:e.user.id});if(!d)return s.status(404).json({message:"Customer not found or does not belong to the current user"});const m=await j.create({customer:d._id,deviceType:t,brand:r,model:o,problemDescription:a,estimatedCost:n,repairNotes:i,completionDate:c});s.status(201).json(m)}catch(e){console.error("Error creating repair:",e),s.status(500).json({message:"Failed to create repair",details:e.message})}})),D.get("/get-repairs",p,(async(e,s)=>{try{const t=(await f.find({user:e.user.id}).select("_id")).map((e=>e._id)),r=await j.find({customer:{$in:t}}).populate("customer","name email");return 0===r.length?s.status(404).json({message:"No repairs found for the user"}):s.status(200).json(r)}catch(e){return console.error("Error fetching repairs:",e),s.status(500).json({message:"Failed to retrieve repairs",details:e.message})}})),D.get("/get-repair/:id",p,(async(e,s)=>{try{const t=await j.findById(e.params.id).populate("customer","name email");return t?s.status(200).json(t):s.status(404).json({message:"Repair not found"})}catch(e){return console.error("Error fetching repair:",e),s.status(500).json({message:"Failed to retrieve repair"})}})),D.put("/update-repair/:id",p,(async(e,s)=>{try{const{id:t}=e.params;if(!n.Types.ObjectId.isValid(t))return s.status(400).json({message:"Invalid repair ID"});const r={deviceType:e.body.deviceType,brand:e.body.brand,model:e.body.model,problemDescription:e.body.problemDescription,estimatedCost:e.body.estimatedCost,status:e.body.status,repairNotes:e.body.repairNotes,completionDate:e.body.completionDate};Object.keys(r).forEach((e=>void 0===r[e]&&delete r[e]));const o=await j.findByIdAndUpdate(t,r,{new:!0,runValidators:!0});if(!o)return s.status(404).json({message:"Repair record not found"});s.status(200).json({message:"Repair record updated successfully",repair:o})}catch(e){if("ValidationError"===e.name)return s.status(400).json({message:"Invalid update data",errors:Object.values(e.errors).map((e=>e.message))});s.status(500).json({message:"Error updating repair record",error:e.message})}})),D.delete("/delete-repair/:id",p,(async(e,s)=>{try{if(!await j.findByIdAndDelete(e.params.id))return s.status(404).json({message:"Repair not found"});s.status(200).json({message:"Repair deleted successfully"})}catch(e){console.error("Error deleting repair:",e),s.status(500).json({message:"An error occurred while deleting the repair."})}}));const I=D,E=e.Router();E.get("/get-stats",p,(async(e,s)=>{try{const t=await f.countDocuments({user:e.user.id}),r=await j.countDocuments({customer:{$in:await f.find({user:e.user.id}).distinct("_id")}}),o=await j.aggregate([{$lookup:{from:"customers",localField:"customer",foreignField:"_id",as:"customerDetails"}},{$unwind:"$customerDetails"},{$match:{"customerDetails.user":new n.Types.ObjectId(e.user.id)}},{$group:{_id:null,totalRevenue:{$sum:"$estimatedCost"}}}]),a=await j.aggregate([{$lookup:{from:"customers",localField:"customer",foreignField:"_id",as:"customerDetails"}},{$unwind:"$customerDetails"},{$match:{"customerDetails.user":new n.Types.ObjectId(e.user.id)}},{$group:{_id:"$status",count:{$sum:1}}}]),i=await j.aggregate([{$lookup:{from:"customers",localField:"customer",foreignField:"_id",as:"customerDetails"}},{$unwind:"$customerDetails"},{$match:{"customerDetails.user":new n.Types.ObjectId(e.user.id)}},{$group:{_id:"$deviceType",count:{$sum:1}}}]),c=new Date;c.setDate(c.getDate()-30);const u=await f.countDocuments({user:e.user.id,createdAt:{$gte:c}}),d=await j.countDocuments({customer:{$in:await f.find({user:e.user.id}).distinct("_id")},createdAt:{$gte:c}});return s.status(200).json({totalCustomers:t,totalRepairs:r,totalIncome:o[0]?.totalRevenue||0,repairStatusBreakdown:a.reduce(((e,s)=>(e[s._id]=s.count,e)),{}),repairDeviceTypeBreakdown:i.reduce(((e,s)=>(e[s._id]=s.count,e)),{}),recentActivity:{newCustomers:u,newRepairs:d}})}catch(e){return console.error("Error fetching statistics:",e),s.status(500).json({message:"An error occurred while fetching statistics."})}}));const T=E,S=(e,s,t,r)=>{console.error(e.stack);const o=200===t.statusCode?500:t.statusCode;t.status(o).json({error:e.message||"An unexpected error occurred"})},R=async(e,s)=>{try{let e="disconnected";try{await n.connection.db.admin().ping(),e="connected"}catch(s){e="connection error"}const t={service:"Repair Management API",version:"1.0.0",status:"healthy",currentTime:(new Date).toISOString(),uptime:process.uptime(),environment:"production",endpoints:["/api/repairs","/api/customers","/api/auth"],systemInfo:{memoryUsage:{rss:Math.round(process.memoryUsage().rss/1024/1024)+" MB",heapTotal:Math.round(process.memoryUsage().heapTotal/1024/1024)+" MB",heapUsed:Math.round(process.memoryUsage().heapUsed/1024/1024)+" MB"}},dependencies:{nodejs:process.version,npm:process.env.npm_package_version||"N/A"},database:{status:e,connectionTime:(new Date).toISOString()}};s.status(200).json(t)}catch(e){s.status(500).json({service:"Repair Management API",status:"error",message:"Unable to retrieve system status"})}};o.config();const A=async()=>{try{await n.connect(process.env.MONGO_URI),console.log("db connection established")}catch(e){console.error(`connection failed: ${e.message}`),process.exit(1)}};o.config();const q=process.env.PORT||3e3,$=a.createLogger({level:"info",format:a.format.combine(a.format.timestamp(),a.format.errors({stack:!0}),a.format.splat(),a.format.json()),transports:[new a.transports.Console({format:a.format.simple()}),new a.transports.File({filename:"error.log",level:"error"}),new a.transports.File({filename:"combined.log"})]});(async()=>{try{await A(),$.info("Database connected successfully");((e,s={})=>{const{logger:t=console,timeout:r=1e4,database:o={},callbacks:a=[]}=s,n=async s=>{t.info(`Received ${s}. Starting graceful shutdown...`);try{e.close((()=>{t.info("HTTP server closed")})),"function"==typeof o.disconnect&&(await o.disconnect(),t.info("Database disconnected"));for(const e of a)await e();const s=setTimeout((()=>{t.warn("Could not close connections in time, forcefully shutting down"),process.exit(1)}),r);clearTimeout(s),process.exit(0)}catch(e){t.error("Error during shutdown",e),process.exit(1)}};process.on("SIGTERM",(()=>n("SIGTERM"))),process.on("SIGINT",(()=>n("SIGINT")))})((()=>{const o=e();o.use(s()),o.disable("x-powered-by");const a=["http://localhost:3000","http://localhost:5173",process.env.FRONTEND_URL].filter(Boolean);return o.use(t({origin:(e,s)=>{!e||a.includes(e)?s(null,!0):s(new Error("Not allowed by CORS"))},methods:["GET","POST","PUT","DELETE","PATCH","HEAD","OPTIONS"],allowedHeaders:["Content-Type","Origin","X-Requested-With","Accept","Authorization"],credentials:!0,optionsSuccessStatus:200})),o.use(e.json({limit:"10kb",verify:(e,s,t)=>{e.rawBody=t.toString()}})),o.use(e.urlencoded({extended:!0,limit:"10kb"})),o.use(r(process.env.COOKIE_SECRET)),o.get("/",R),o.use("/api/repair/auth",y),o.use("/api/repair/customer",b),o.use("/api/repair/repair",I),o.use("/api/repair/stats",T),o.use(S),o})().listen(q,(()=>{$.info(`Server running on port ${q}`)})),{logger:$,database:{disconnect:A.disconnect}})}catch(e){$.error("Failed to start server",{error:e}),process.exit(1)}})(),process.on("uncaughtException",(e=>{$.error("Uncaught Exception",{error:e}),process.exit(1)}));